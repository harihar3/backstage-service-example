stages:
    - lint
    - build
    - test
    - sonarqube-check
    - sonarqube-vulnerability-report
    - dockerize

# ----------------------------- LINT STAGE -----------------------------
lint:
    stage: lint
    image: maven:3-eclipse-temurin-17
    script:
        - echo "Running code linting with checkstyle....."
        - mvn checkstyle:check
    allow_failure: true
    only:
        - main

# ----------------------------- BUILD STAGE -----------------------------
build-job:
    stage: build
    image: maven:3-eclipse-temurin-17
    script:
        - echo "Running build..."
        - mvn clean package -DskipTests=true
    artifacts:
        paths:
            - target/my-webapp.war
        expire_in: 1 day
    only:
        - main

# ----------------------------- TEST STAGE -----------------------------
unit-tests:
    stage: test
    image: maven:3-eclipse-temurin-17
    script:
        - echo "Running unit tests..."
        - mvn test
    artifacts:
        reports:
            junit: target/surefire-reports/TEST-*.xml
    only:
        - main

# ---------------------- SONARQUBE ANALYSIS STAGE ----------------------
sonarqube-check:
    stage: sonarqube-check
    image: maven:3-eclipse-temurin-17
    variables:
        SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
        GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .sonar/cache
    script:
        - echo "Starting SonarQube scan..." 
        - mvn verify sonar:sonar
    allow_failure: true
    only:
        - main

# ----------- EXPORT SONARQUBE SECURITY VULNERABILITY REPORT ----------
sonarqube-vulnerability-report:
    stage: sonarqube-vulnerability-report
    script:
        - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=hariharpanda3_gitlab-poc_2eb50b77-dee9-4ab8-98a0-39f70686ecbe&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
    allow_failure: true
    only:
        - main
    artifacts:
        expire_in: 1 day
        reports:
            sast: gl-sast-sonar-report.json
    dependencies:
        - sonarqube-check

# --------------------- DOCKER BUILD & PUSH STAGE ---------------------
dockerize-application:
  stage: dockerize
  image: docker:20.10
  services:
    - docker:20.10-dind
  before_script:
    - echo "Logging in to GitLab Container Registry..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" registry.gitlab.com
  script:
    - echo "Copying WAR file..."
    - cp target/my-webapp.war .
    - echo "Building Docker image..."
    - docker build -t registry.gitlab.com/hariharpanda3/gitlab-poc:$CI_COMMIT_SHORT_SHA .
    - echo "Pushing Docker image..."
    - docker push registry.gitlab.com/hariharpanda3/gitlab-poc:$CI_COMMIT_SHORT_SHA
  only:
    - main














# SonarQube Analysis Stage
.sonarqube-check:
    stage: sonarqube-check
    image: maven:3-eclipse-temurin-17
    variables:
        SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
        GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .sonar/cache
    script: 
        - mvn verify sonar:sonar
    allow_failure: true
    only:
        - merge_requests
        - master
        - main
        - develop

# SonarQube Vulnerability Report Stage
.sonarqube-vulnerability-report:
    stage: sonarqube-vulnerability-report
    script:
        - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=hariharpanda3_gitlab-poc_2eb50b77-dee9-4ab8-98a0-39f70686ecbe&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
    allow_failure: true
    only:
        - merge_requests
        - master
        - main
        - develop
    artifacts:
        expire_in: 1 day
        reports:
            sast: gl-sast-sonar-report.json
    dependencies:
        - sonarqube-check

# --------------------- DOCKER BUILD & PUSH STAGE ---------------------
.dockerzie-application:
    stage: dockerize
    image: docker:20.10
    services:
        - docker:20.10-dind
    needs:
        - build-job
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.gitlab.com
    script:
        - cp target/my-webapp.war .
        - docker build -t registry.gitlab.com/hariharpanda3/gitlab-poc .
        - docker push registry.gitlab.com/hariharpanda3/gitlab-poc